#!/bin/bash

set -e

tmpfile=$(mktemp -t 'twm.XXX')
trap 'rm "$tmpfile"' EXIT

listwindows() {
	while IFS=: read -r id _; do
		name=$(tmux display-message -t ":$id" -p '#{window_name}')
		echo "$id: $name"
	done < <(tmux list-windows)
}

orig=$(listwindows)

cat >"$tmpfile" <<EOF
$orig

# This script is a text-based window manager for tmux. To close a window,
# delete or comment its line. Rearrange lines to reorder your windows. Adjust
# window names as desired. Windows will be renumbered if their order has
# changed. To create a window, start a line with a colon, optionally followed
# by a space and the window name. Only lines that start with a number or a
# colon will be parsed. An empty file (or one with only comments) aborts the
# operation, and no action will be taken.
EOF

vi "$tmpfile"

desired=$(awk '/^[0-9:]/' <"$tmpfile")

if [[ -z "$desired" ]]; then
	echo "Operation was cancelled" >&2
	exit 0
fi

if [[ "$orig" == "$desired" ]]; then
	echo "Unchanged" >&2
	exit 0
fi

originalwindow=$(tmux display-message -p -F '#{window_id}')
originalwindowindex=$(tmux display-message -p '#I')
should_delete=no

# Move any remaining windows, in order, to an index >100
newindex=100
while IFS=': ' read -r id name; do
	newindex=$((newindex + 1))
	if [[ -z "$id" ]]; then
		tmux new-window -d -t ":$newindex"
		if [[ -n "$name" ]]; then
			tmux rename-window -t ":$newindex" "$name"
		fi
		continue
	fi
	tmux rename-window -t ":$id" "$name"
	tmux move-window -d -s ":$id" -t ":$newindex"
done <<<"$desired"

# All windows moved to an index >= 100, delete the remaining
while IFS=': ' read -r id _; do
	if [[ "$id" -ge 100 ]]; then
		break
	fi
	if [[ "$id" == "$originalwindowindex" ]]; then
		tmux move-window -d -s ":$id" -t ":200"
		should_delete=yes
		continue
	fi
	tmux kill-window -t ":$id"
done < <(listwindows)

# Renumber
tmux move-window -r

tmux select-window -t "$originalwindow"

echo "$desired"

if [[ "$should_delete" == yes ]]; then
	tmux kill-window -t "$originalwindow"
fi
